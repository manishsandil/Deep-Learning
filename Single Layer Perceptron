#IMPORT REQUIRED LIBRARIES
import matplotlib.pyplot as plt
import tensorflow as tf
import numpy as np
import pandas as pd
from sklearn import preprocessing
from sklearn.utils import  shuffle
from sklearn.model_selection import train_test_split

#IMPORT DATA
df = pd.read_csv("wine.csv", header=0)
print(df.describe())

#START TENSORFLOW SESSION
sess = tf.Session()

#PREPARE INPUT AND TARGET DATA
X = df[df.columns[1:13]].values
y = df['Wine'].values-1
Y = tf.one_hot(indices = y, depth=3, on_value = 1., off_value = 0., axis = 1 ,name = "a").eval(session=sess)

#SHUFFLE AND TRANSFORM DATA
X, Y = shuffle (X, Y)
scaler = preprocessing.StandardScaler()
X = scaler.fit_transform(X)
X,Y =shuffle (X, Y, random_state=1)

#SPLIT TRAINING AND TEST DATA
Xtr=X[0:140,:]
Ytr=Y[0:140,:]
Xt=X[140:178,:]
Yt=Y[140:178,:]
Xtr, Ytr = shuffle (Xtr, Ytr, random_state=0)
batch_xs, batch_ys = Xtr , Ytr

cost_history = np.empty(shape=[1],dtype=float)

#DEFINE EPOCHS AND LEARNING RATE
training_epochs = 100
learning_rate = 0.1

#DEFINE VARIABLES AND PLACEHOLDERS
x= tf.placeholder(tf.float32, [None, 12])
W= tf.Variable(tf.zeros([12, 3]))
b= tf.Variable(tf.zeros([3]))

#INITILIASE VARIABLES
init = tf.global_variables_initializer()
y_ = tf.placeholder(tf.float32, [None, 3])
y= tf.nn.softmax(tf.matmul(x, W) + b)

#REDUCE MEAN
cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))

#PERFROM GRADIENT DESCENT
train_step = tf.train.GradientDescentOptimizer(learning_rate).minimize(cross_entropy)
sess = tf.Session()
sess.run(init)

#TRAIN THE MODEL
for i in range(1000):
    sess.run(train_step,feed_dict=({x: batch_xs, y_: batch_ys}))
    cost = sess.run (cross_entropy, feed_dict={x: batch_xs, y_: batch_ys})
    cost_history= np.append(cost_history,cost)
    correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))
    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
    print('epoch: ', i, ' - ', 'cost: ', cost)
    print("Accuracy",(sess.run(accuracy,feed_dict={x: Xt, y_: Yt})))
plt.plot(range(len(cost_history)),cost_history)
plt.axis([0,training_epochs,0,np.max(cost_history)])
plt.show()

