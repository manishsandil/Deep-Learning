#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat May 18 08:52:18 2019

@author: manishsandil
"""
import tensorflow as tf
import pandas as pd
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
import numpy as np
import matplotlib.pyplot as plt

sess = tf.Session()

ohe = OneHotEncoder(categorical_features=[0])
   
def one_hot_encode(labels):
    n_labels = len(labels)
    n_unique_labels = len(np.unique(labels))
    one_hot_encode = np.zeros((n_labels,n_unique_labels))
    one_hot_encode[np.arange(n_labels),labels] = 1
    return one_hot_encode

df = pd.read_csv('/Users/manishsandil/Edureka/module 3/Wine.csv')


X = df[df.columns[1:14]].values

y = df['Wine'].values-1
print(X.shape)

encoder = LabelEncoder()
encoder.fit(y)
Y = one_hot_encode(y)

X,Y = shuffle(X,Y,random_state=1)

X_train,X_test,y_train,y_test = train_test_split(X,Y,test_size=0.20,random_state = 415)
 
learning_rate = 0.1
training_epochs = 100
cost_history = np.empty(shape=[1],dtype=float)

n_dim = X.shape[1]
n_class = 3

#Define hidden layers - 3 and no. Nuerons for each layer
n_hidden_1 = 5
n_hidden_2 = 5
n_hidden_3 = 5
 
x = tf.placeholder(tf.float32,[None,n_dim])
W = tf.Variable(tf.zeros([n_dim,n_class]))
b = tf.Variable(tf.zeros([n_class]))
y_ = tf.placeholder(tf.float32,[None,n_class])

#Define the model
def multilayer_perceptron(x, weights, biases):
    #Hidden Layer 1 with ReLu
    layer_1 = tf.add(tf.matmul(x,weights['h1']),biases['b1'])
    layer_1 = tf.nn.relu(layer_1)
    
    #Hidden layer with Sigmoid function
    layer_2 = tf.add(tf.matmul(layer_1,weights['h2']),biases['b2'])
    layer_2 = tf.nn.relu(layer_2)
    
    layer_3 = tf.add(tf.matmul(layer_2,weights['h3']),biases['b3'])
    layer_3 = tf.nn.sigmoid(layer_3)
    #Output layer
    out_layer = tf.matmul(layer_3,weights['out'] + biases['out'])
    return out_layer

#Define weights and biases for each layer
weights = {
        'h1':tf.Variable(tf.truncated_normal([n_dim, n_hidden_1])),
        'h2':tf.Variable(tf.truncated_normal([n_hidden_1, n_hidden_2])),
        'h3':tf.Variable(tf.truncated_normal([n_hidden_2, n_hidden_3])),
        'out':tf.Variable(tf.truncated_normal([n_hidden_3, n_class]))
        }

biases = {
        'b1':tf.Variable(tf.truncated_normal([n_hidden_1])),
        'b2':tf.Variable(tf.truncated_normal([n_hidden_2])),
        'b3':tf.Variable(tf.truncated_normal([n_hidden_3])),
        'out':tf.Variable(tf.truncated_normal([n_class])),
        }
#initialise all variables
init = tf.global_variables_initializer()

saver = tf.train.Saver()

#Call the model
y = multilayer_perceptron(x,weights,biases)

#Define Cost Function and Optimizer
cost_function = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=y, labels=y_))
training_step = tf.train.GradientDescentOptimizer(learning_rate).minimize(cost_function)


sess.run(init)
mse_history = []
accuracy_history = []


#Calculate the cost for each epoch in training
for epoch in range(training_epochs):
    sess.run(training_step,feed_dict={x:X_train,y_:y_train})
    cost = sess.run(cost_function,feed_dict={x:X_train,y_:y_train})
    cost_history = np.append(cost_history,cost)
    correct_prediction = tf.equal(tf.arg_max(y,1), tf.arg_max(y_,1))
    accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32))
    y_pred = sess.run(y,feed_dict={x:X_test})
    
    mse = tf.reduce_mean(tf.square(y_pred - y_test))
    mse_ =  sess.run(mse)
    mse_history.append(mse_)
    accuracy = (sess.run(accuracy,feed_dict={x: X_train,y_:y_train}))
    accuracy_history.append(accuracy)
    print('epoch:',epoch,'-','cost:',cost,'- MSE:',mse_,'- Accuracy:',accuracy)

#save_path = saver.save(sess, mod)
#Calculate Accuracy
correct_prediction = tf.equal(tf.argmax(y,1),tf.arg_max(y_,1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32))
print('Test Accuracy:',sess.run(accuracy, feed_dict={x:X_test, y_:y_test})*100,'%')

y_pred = sess.run(y, feed_dict={x: X_test})
mse = tf.reduce_mean(tf.square(y_pred - y_test))
print('MSE:',sess.run(mse))
#Plot Accuracy Graph
plt.plot(accuracy_history)
plt.xlabel('Epoch')
plt.ylabel('MSE')
plt.show()

sess.close()

