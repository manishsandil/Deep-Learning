#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon May 27 22:01:49 2019

@author: manishsandil
"""
import numpy as np
from keras.layers import Input, Dense
from keras.models import Model
from keras.datasets import mnist
import matplotlib.pyplot as plt

# Size of our encoded representations:encoding_dim
encoding_dim = 32

# Input plaeholder:input_img
input_img = Input(shape=(784,))

# Encoded representation of Input:encoded
encoded = Dense(encoding_dim, activation='relu')(input_img)

# Decoded lossy reconstruction of input:decoder
decoded = Dense(784,activation='sigmoid')(encoded)

# Create Autoencoder Model for reconstruction:autoencoder
autoencoder = Model(input_img, decoded)

# Model to map Input to Encoded:encoder
encoder = Model(input_img, encoded)

# Create Placeholder for encoded input: encoded_input
encoded_input = Input(shape=(encoding_dim,))

# Retrieve last layer of Autoencoder Model:decoder_layer
decoder_layer = autoencoder.layers[-1]

# Create decoder model:decoder
decoder = Model(encoded_input,decoder_layer(encoded_input))

# Configure Model
autoencoder.compile(optimizer='adadelta', loss='binary_crossentropy')

### Prepare Train and Test Data
(X_train, y_train),(X_test,y_test) = mnist.load_data()

# normalise data and flatten image
X_train = X_train.astype('float32')/255
X_test = X_test.astype('float32')/255
X_train = X_train.reshape((len(X_train), np.prod(X_train.shape[1:])))
X_test = X_test.reshape((len(X_test), np.prod(X_test.shape[1:])))

# Train Autoencoder 
autoencoder.fit(X_train,X_train, 
                epochs = 100, 
                batch_size = 256, 
                shuffle = True,
                validation_data = (X_test,X_test))

encoded_images = encoder.predict(X_test)
decoded_images = decoder.predict(encoded_images)

### VISUALISATION
n = 20 # how many digits we will display
plt.figure(figsize=(20, 4))
for i in range(n):
    ax = plt.subplot(2, n, i + 1)
    plt.imshow(X_test[i].reshape(28, 28))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
 
 
 
# display reconstruction
    ax = plt.subplot(2, n, i + 1 + n)
    plt.imshow(decoded_images[i].reshape(28, 28))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
plt.show()


